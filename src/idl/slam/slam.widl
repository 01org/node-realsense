// #ifdef finaldoc

/**
 * This doc include all interfaces to the developers, exposed by SLAM module,
 * no matter where the interface was implemented, by native addon's or JS wrapper.
 * It will have some difference with the slam.widl file, that is for development.
 */
// #endif

// include <common-types.widl>
enum TrackingAccuracy {
  "low",
  "med",
  "high",
  "failed"
};

interface OccupancyMapBounds {
  readonly attribute long minX; // Stored the minimum tile seen on the X-axis
  readonly attribute long minZ; // Stored the minimum tile seen on the Z-axis
  readonly attribute long maxX; // Stored the maximum tile seen on the X-axis
  readonly attribute long maxZ; // Stored the maximum tile seen on the Z-axis
};

dictionary RegionOfInterest {
  required long minX;
  required long minY;
  required long maxX;
  required long maxY;
};

interface OccupancyMapData {
  readonly attribute boolean isDataPending;
  readonly attribute long tileCount;
  // Sequence of occupancy tile <x, y, occupancy>
  readonly attribute Int32Array data;
};

interface MapImage {
  readonly attribute unsigned long width;
  readonly attribute unsigned long height;
  readonly attribute Uint8Array data;
};

dictionary RangeOfInterest {
  float min;
  float max;
};

interface TrackingResult {
  readonly attribute TrackingAccuracy accuracy;
  readonly attribute float[] cameraPose;
  readonly attribute FrameData frameData;
};

interface EventInfo {
  readonly attribute TrackingAccuracy accuracy;
  readonly attribute float[] cameraPose;
};

interface TrackingEvent {
  readonly attribute String eventName;
  readonly attribute EventInfo data;
};

enum SlamState {
  "ready",
  "tracking",
  "paused",
};

//TODO: check if start/stop Occupancy/Relocalization can be called
//while pipleline is running.
dictionary InstanceOptions {
  boolean enableOccupancyMapBuilding;
  RangeOfInterest occupancyMapHeightOfInterest;
  RangeOfInterest occupancyMapDepthOfInterest;
  float occupancyMapResolution;

  boolean enableRelocalizationMapping;
  boolean enableForceRelocalizationPose;
};

// #ifdef finaldoc
// This will be direct addon entry.
//      Promise<Instance> createInstance();
// #endif
interface Instance {
  readonly attribute SlamState state;

  // TODO: Documents should show out all the avalible config values.
  // Or an extra interface querySupportedConfig()?
  // Can be used to check actual module config.
  Promise<CameraOptions> getCameraOptions();
  Promise<InstanceOptions> getInstanceOptions();

  // Configs should be set before start at the begining or after reset.
  Promise<void> setCameraOptions(CameraOptions options);
  // It's required by bikeshed that dictionary with no must-have members should
  // be optional.
  Promise<void> setInstanceOptions();
  Promise<void> setInstanceOptions(InstanceOptions options);

  Promise<void> start();
  Promise<void> stop();
  Promise<void> pause();
  Promise<void> resume();
  // Rsets SLAM module back to unconfigured state.
  Promise<void> reset();

  // Restarts SLAM with pose aligned to gravity.
  Promise<void> restartTracking();

  Promise<TrackingResult> getTrackingResult();
  Promise<OccupancyMapData> getOccupancyMap();
  Promise<OccupancyMapData> getOccupancyMap(RegionOfInterest roi);
  Promise<MapImage> getOccupancyMapAsRgba(boolean drawPoseTrajectory, boolean drawOccupancyMap);
  Promise<OccupancyMapData> getOccupancyMapUpdate();
  Promise<OccupancyMapData> getOccupancyMapUpdate(RegionOfInterest roi);
  Promise<OccupancyMapBounds> getOccupancyMapBounds();

  //OPEN: Replace file name to file blob, for following 4 APIs.
  Promise<void> loadOccupancyMap(String mapFileName);

  //OPEN: no file I/O
  Promise<void> saveOccupancyMap(String mapFileName);
  Promise<void> saveOccupancyMapAsPpm(String mapFileName, boolean drawCameraTrajectory);

  Promise<void> loadRelocalizationMap(String mapFileName);
  //@return the full path of the saved map file.
  Promise<void> saveRelocalizationMap(String mapFileName);

  //TODO: float32Array
  Promise<sequence<float>> getRelocalizationPose();

  // #ifdef finaldoc
  //Events
  //TODO: support these in the future.
  //attribute EventHandler ontracking;
  //attribute EventHandler onerror;
  // #endif
};
