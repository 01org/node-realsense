////////////// Global config related //////////////
dictionary PersonTrackerOptions {
    GestureRecognitionOptions gesture;
    LyingPoseRecognitionOptions lying;  // Not supported yet
    PersonFaceOptions personFace;
    PersonPoseRecognitionOptions pose;  // Not supported yet
    PersonRecognitionOptions recognition;
    SkeletonRecognitionOptions skeleton;
    TrackingOptions tracking;
};

/////////// Skeletion Joint Recognition //////////////////
//the mode with "rough" postfix means fewer skeleton points are detected.
enum SkeletonArea {
    "upper-body",
    "upper-body-rough",
    "full-body-rough",  // Not supported yet
    "full-body"
};

dictionary SkeletonRecognitionOptions {
    boolean enable;
    long maxTrackedPerson;  // Not supported yet
    SkeletonArea trackingArea;  // Not supported yet
};


/////////// Tracking /////////////////
enum TrackingMode {
    "following",
    "interactive",  // Not supported yet
    "single-person"  // Not supported yet
};

enum DetectionMode {
    "auto",
    "close-range",
    "mid-range",
    "far-range",
    "full-range"
};

dictionary TrackingOptions {
    boolean enable;
    boolean enableBlob;  // Not supported yet
    boolean enableDetectionFromFar;
    boolean enableHeadBoundingBox;
    boolean enablePersonOrientation;
    boolean enableSegmentation;  // Not supported yet
    DetectionMode detectionMode;
    long maxTrackedPerson;  // Not supported yet
    TrackingMode trackingMode;
};

/////////////////// Lying Pose Recognition (Not supported) ////////////////////////
enum LyingPoseRecognitionState {
    "searching",
    "classifing",
};

dictionary LyingPoseRecognitionOptions {
    boolean enable;
    long maxTrackedPerson;
};

enum ClassificationResult {
    "classified",
    "need-different-view-point",
    "not-classified"
};

interface LyingPoseInfo {
    attribute PointCombinedInfo position;
    attribute BoundingBox2DInfo boundingBox;
    attribute ClassificationResult result;
    attribute long confidence;
};

interface LyingPoseRecognition {
    Promise<void> setRecognitionState(LyingPoseRecognitionState state);
    Promise<LyingPoseRecognitionState> getRecognitionState();
    Promise<long> getCandidatesCount();
    Promise<LyingPoseInfo[]> getCandidatesData();
};

////////////////// Pose (Not supported) /////////////////////////////////
dictionary PersonPoseRecognitionOptions {
    boolean enable;
    long maxTrackedPerson;
};

/////////////////// Person Regocnition //////////////////
enum PersonRecognitionPolicy {
    "standard",
    //"strict"
};

//enum PersonRecognitionAsyncPolicy {
//    "single-frame",
//    //"multi-frame"
//};

dictionary PersonRecognitionOptions {
    boolean enable;
    PersonRecognitionPolicy policy;
    //PersonRecognitionAsyncPolicy asyncPolicy; //is multiple frame recognization or single frame.
};

interface PersonRegistrationData {
    readonly attribute long trackID;
    readonly attribute long recognitionID;
    readonly attribute long descriptorID;
};

enum PersonRecognizerStatus {
  "recognized",
  "not-recognized",
  "generic-failure",
  "no-person-found-with-the-trackID",
  "recognition-not-enabled",
  "face-not-detected",
  "face-not-clear",
  "person-too-far",
  "person-too-close",
  "face-ambiguity"
};

interface PersonRecognizerData {
    readonly attribute boolean recognized;
    readonly attribute long trackID;
    readonly attribute long recognitionID;
    readonly attribute long similarityScore;
};

interface PersonRecognizerDataWithStatus {
    readonly attribute PersonRecognizerData data;
    readonly attribute PersonRecognizerStatus status;
};

//interface to manipulate recognition
interface PersonRecognition {
    //Database related API
    Promise<void> clearDatabase();
    Promise<ArrayBuffer> exportDatabase();
    Promise<void> importDatabase(ArrayBuffer buf);

    //Register related API
    Promise<PersonRegistrationData> registerPerson(long trackID);
    Promise<void> unRegisterPerson(long recognitionID);
    Promise<boolean> recognitionIDExist(long recognitionID);
    Promise<sequence<long>> getAllRecognitionIDs();
    Promise<void> removePersonDescriptor(long recognitionID, long descriptorID);
    Promise<sequence<long>> getPersonDescriptorIDs(long recognitionID);
    Promise<PersonRegistrationData> reinforceRegistration(long trackID, long recognitionID);

    //recognize related API
    Promise<PersonRecognizerData> recognizePerson(long trackID);
    //try to recognize a person indicated by trackID and if recognized, get the similarity score with the person indicated by recognitionID.
    Promise<float> querySimilarityScoreFromPerson(long trackID, long recognitionID);
    //recognize all persons detected by the camera
    Promise<sequence<PersonRecognizerDataWithStatus>> recognizeAllPersons();
};

//////////////// Gesture Recognition /////////////////

enum GestureType {
    "pointing"
};

dictionary GestureRecognitionOptions {
    boolean enable;
    boolean enableAllGestures;
    boolean enablePointing;
    boolean disableAllGestures;
    long maxTrackedPerson;  // Not supported yet
};

///////////////// Person Face /////////////////

enum Expression {
    "neutral",
    "happiness",
    "sadness",
    "surprise",
    "fear",
    "anger",
    "disgust",
    "contempt"
};

dictionary PersonFaceOptions {
    boolean enableFaceLandmarks;
    boolean enableHeadPose;
    ExpressionRecognitionOptions expression;  // Not supported yet
};

dictionary ExpressionRecognitionOptions {
    boolean enable;
    boolean enableAllExpressions;
    boolean enableAnger;
    boolean enableContempt;
    boolean enableDisgust;
    boolean enableFear;
    boolean enableHappy;
    boolean enableNeutral;
    boolean enableSad;
    boolean enableSurprise;
    boolean disableAllExpressions;
    long maxTrackedPerson;
};

/////////////// The controller ////////////////

interface PersonTracking {
    Promise<void> startTrackingPerson(long trackID);
    Promise<void> stopTrackingPerson(long trackID);
    Promise<void> resetTracking();
};

enum TrackingState {
    "ready",
    "running",
    "detecting",
    "tracking",
    "paused",
    "errored"
};

partial interface Module {
  static Promise<PersonTracker> createPersonTracker(optional PersonTrackerOptions personTrackerOptions, optional CameraOptions cameraOptions);
};

interface PersonTracker {
    Promise<void> start();
    Promise<void> stop();
    Promise<void> pause();
    Promise<void> resume();
    Promise<void> reset();
    Promise<void> setPersonTrackerOptions(PersonTrackerOptions personTrackerOptions);
    Promise<PersonTrackerOptions> getPersonTrackerOptions();
    Promise<void> setCameraOptions(CameraOptions cameraOptions);
    Promise<CameraOptions> getCameraOptions();
    Promise<FrameData> getFrameData();
    Promise<PersonInfo> getPersonInfo(long trackID);

    readonly attribute TrackingState state;
    readonly attribute PersonRecognition personRecognition;
    readonly attribute LyingPoseRecognition lyingPoseRecognition;  // Not supported yet
    readonly attribute PersonTracking personTracking;

    //Events
    //For the persontracked event, the data is PersonTrackingResult
    //attribute EventHandler onpersontracked;
    //attribute EventHandler onframeprocessed;
};

////////////// Result ////////////////

enum AccessOrder {
    "access-order-by-index"
};

interface PersonInfo {
    readonly attribute SkeletonInfo? skeletonInfo;
    readonly attribute TrackingInfo? trackInfo;
    readonly attribute GestureInfo? gestureInfo;
    readonly attribute PersonFaceInfo faceInfo;
    readonly attribute PoseInfo? poseInfo;  // Not supported yet
};

interface PersonTrackingResult {
    readonly attribute PersonInfo[] persons;//ordered by id by default
};

enum JointType {
    "ankle-left",
    "ankle-right",
    "elbow-left",
    "elbow-right",
    "foot-left",
    "foot-right",
    "hand-left",
    "hand-right",
    "hand-tip-left",
    "hand-tip-right",
    "head",
    "hip-left",
    "hip-right",
    "knee-left",
    "knee-right",
    "neck",
    "shoulder-left",
    "shoulder-right",
    "spine-base",
    "spine-mid",
    "spine-shoulder",
    "thumb-left",
    "thumb-right",
    "wrist-left",
    "wrist-right"
};

interface SkeletonPointInfo {
    readonly attribute JointType jointType;
    readonly attribute Point3D worldCoordinate;
    readonly attribute Point2D imageCoordinate;
    readonly attribute long worldConfidence;
    readonly attribute long imageConfidence;
};

interface SkeletonInfo {
    readonly attribute SkeletonPointInfo[] skeletonJoints;
};

interface BoundingBox2DInfo {
    readonly attribute Rect2D rect;
    readonly attribute long confidence;
};

interface MaskInfo {
    readonly attribute long width;
    readonly attribute long height;
    readonly attribute ArrayBuffer maskData;
};

interface PointCombinedInfo {
    readonly attribute Point3D worldCoordinate;
    readonly attribute Point2D imageCoordinate;
    readonly attribute long worldConfidence;
    readonly attribute long imageConfidence;
};

interface PoseEulerAngles {
    readonly attribute float yaw;
    readonly attribute float pitch;
    readonly attribute float roll;
};

enum PersonOrientation {
    "frontal",
    "45-degree-right",
    "45-degree-left",
    "profile-right",
    "profile-left",
    "rear"
};

interface OrientationInfo {
    readonly attribute PersonOrientation orientation;
    readonly attribute long confidence;
};

interface TrackingInfo {
    readonly attribute long id;
    readonly attribute BoundingBox2DInfo boundingBox;
    readonly attribute PointCombinedInfo center;
    readonly attribute BoundingBox2DInfo? headBoundingBox;
    readonly attribute MaskInfo? segmentationMask;
    readonly attribute MaskInfo? blobMask;
    readonly attribute OrientationInfo? personOrientation;
};

interface FaceLandmark {
    readonly attribute Point3D imageCoordinate; //todo, use float Point3D
    readonly attribute Point3D worldCoordinate; //todo, use float Point3D
};

interface FaceLandmarkInfo {
    readonly attribute FaceLandmark[] landmarks;
    readonly attribute long confidence;
};

interface PointingData2D {
  readonly attribute Point2D origin;
  readonly attribute Point2D direction;
};

interface PointingData3D {
  readonly attribute Point3D origin;
  readonly attribute Point3D direction;
};

interface PointingInfo {
    readonly attribute PointingData3D worldPointingData;
    readonly attribute PointingData2D colorPointingData;
    readonly attribute long confidence;
    readonly attribute long gestureStartTimeStamp;
};

interface GestureInfo {
    readonly attribute boolean isPointing;
    readonly attribute PointingInfo? pointingInfo;
};

interface ExpressionInfo {
    readonly attribute Expression type;
    readonly attribute long confidence;
};

interface ExpressionInfoCollection {
    readonly attribute ExpressionInfo[] infoCollection;
};

interface PersonFaceInfo {
    readonly attribute FaceLandmarkInfo? landmarkInfo;
    readonly attribute PoseEulerAngles? headPose;
    readonly attribute ExpressionInfoCollection? expressionInfo;
};

enum PositionType {
    "lying-down",
    "sitting",
    "standing"
};

interface PoseInfo {
    readonly attribute PositionType position;
    readonly attribute long confidence;
};
