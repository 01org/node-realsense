// Copyright (c) 2016 Intel Corporation. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

enum StreamType {
  "depth",
  "color",
  "infrared",
  "infrared2",
  "points",
  "rectified_color",
  "color_aligned_to_depth",
  "infrared2_aligned_to_depth",
  "depth_aligned_to_color",
  "depth_aligned_to_rectified_color",
  "depth_aligned_to_infrared2"
};

enum FormatType {
  "any",
  "z16",
  "disparity16",
  "xyz32f",
  "yuyv",
  "rgb8",
  "bgr8",
  "rgba8",
  "bgra8",
  "y8",
  "y16",
  "raw10"
};

enum PresetType {
  "best_quality",
  "largest_image",
  "highest_framerate"
};

enum OptionType {
  "color_backlight_compensation",
  "color_brightness",
  "color_contrast",
  "color_exposure",
  "color_gain",
  "color_gamma",
  "color_hue",
  "color_saturation",
  "color_sharpness",
  "color_white_balance",
  "color_enable_auto_exposure",
  "color_enable_auto_white_balance",
  "f200_laser_power",
  "f200_accuracy",
  "f200_motion_range",
  "f200_filter_option",
  "f200_confidence_threshold",
  "f200_dynamic_fps",
  "sr300_auto_range_enable_motion_versus_range",
  "sr300_auto_range_enable_laser",
  "sr300_auto_range_min_motion_versus_range",
  "sr300_auto_range_max_motion_versus_range",
  "sr300_auto_range_start_motion_versus_range",
  "sr300_auto_range_min_laser",
  "sr300_auto_range_max_laser",
  "sr300_auto_range_start_laser",
  "sr300_auto_range_upper_threshold",
  "sr300_auto_range_lower_threshold",
  "r200_lr_auto_exposure_enabled",
  "r200_lr_gain",
  "r200_lr_exposure",
  "r200_emitter_enabled",
  "r200_depth_units",
  "r200_depth_clamp_min",
  "r200_depth_clamp_max",
  "r200_disparity_multiplier",
  "r200_disparity_shift",
  "r200_auto_exposure_mean_intensity_set_point",
  "r200_auto_exposure_bright_ratio_set_point",
  "r200_auto_exposure_kp_gain",
  "r200_auto_exposure_kp_exposure",
  "r200_auto_exposure_kp_dark_threshold",
  "r200_auto_exposure_top_edge",
  "r200_auto_exposure_bottom_edge",
  "r200_auto_exposure_left_edge",
  "r200_auto_exposure_right_edge",
  "r200_depth_control_estimate_median_decrement",
  "r200_depth_control_estimate_median_increment",
  "r200_depth_control_median_threshold",
  "r200_depth_control_score_minimum_threshold",
  "r200_depth_control_score_maximum_threshold",
  "r200_depth_control_texture_count_threshold",
  "r200_depth_control_texture_difference_threshold",
  "r200_depth_control_second_peak_threshold",
  "r200_depth_control_neighbor_threshold",
  "r200_depth_control_lr_threshold"
};

dictionary Mode {
  long width;
  long height;
  FormatType format;
  long framerate;
};

dictionary Range {
  double min;
  double max;
  double step;
};

[
Constructor()
]
interface Context {
  Promise<long> getDeviceCount();
  Promise<Device> getDevice(long index);
};

interface Device {
  Promise<String> getName();
  Promise<String> getSerial();
  Promise<String> getFirmwareVersion();
  Promise<float> getDepthScale();
  Promise<boolean> isStreaming();

  Promise<boolean> supportsOption(OptionType option);
  Promise<long> getStreamModeCount(StreamType stream);
  Promise<Mode> getStreamMode(StreamType stream, long index);
  Promise<boolean> isStreamEnabled(StreamType stream);
  Promise<void> enableStream(StreamType stream, Mode mode);
  Promise<long> getStreamWidth(StreamType stream);
  Promise<long> getStreamHeight(StreamType stream);
  Promise<long> getFrameTimeStamp(StreamType stream);

  Promise<void> start();
  Promise<void> stop();
};

interface FrameData {
  readonly attribute StreamType stream;
  readonly attribute ArrayBuffer data;
};
