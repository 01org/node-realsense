<pre class='metadata'>
Title: Common JavaScript API in OR/PT/SLAM
Shortname: Common
Level: 1
Status: LS
URL: https://github.com/01org/node-realsense
Editor: Kenny Yuan
Repository: https://github.com/01org/node-realsense
Abstract: This specification describes the common JavaScript API in OR/PT/SLAM module for Intel® RealSense™ camera.
Markup Shorthands: css no, markdown yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp
</pre>

<pre class=link-defaults>
spec:html; type:element;
	text:a
	text:script
	text:style
</pre>

<style>
table {
  text-indent: 20px;
  word-wrap: normal;
  overflow-wrap: normal;
  hyphens: manual;
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
//  font-weight: bold;
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}

li {list-style-type: none;}
</style>

Introduction {#introduction}
========================

The APIs described in this document are exposed in <code>realsense-object-recognition</code>, <code>realsense_person_tracking</code> and <code>realsense_slam</code> module.

Interface {#interface}
========================



<dfn>Point2D</dfn> {#point2DInterface}
----------------------------

<pre class="idl">
[
Constructor,
Constructor(float x, float y),
Constructor(sequence&lt;float&gt; coords)
]
interface Point2D {
  attribute float x;
  attribute float y;

  void setCoords(sequence&lt;float&gt; coords);
  void setCoords(float x, float y);
  sequence&lt;float&gt; getCoords();

  boolean equal(Point2D point);
  boolean equal(float x, float y);

  static float distance(Point2D p1, Point2D p2);
};
</pre>

### Attributes ### {#point2d-attributes-1}
: {{x}} of type [=float=]
::  The current x value of the point

### Attributes ### {#point2d-attributes-2}
: {{y}} of type [=float=]
::  The current y value of the point

### Methods ### {#methods-point2DInterface}
: {{setCoords}}
:: Use this method to change the (x, y) value of the point.
:: *Return type*: <code>void</code>

: {{getCoords}}
:: Use this method to get the (x, y) value of the point.
:: *Return type*: <code>sequence&lt;float&gt;</code>

: {{equal}}
:: Use this method to compare to another point.
:: *Return type*: <code>booleanean</code>

: {{distance}}
:: Use this method to calculate the distance between 2 points.
:: *Return type*: <code>float</code>



<dfn>Point3D</dfn> {#point3DInterface}
----------------------------

<pre class="idl">
[
Constructor,
Constructor(float x, float y, float z),
Constructor(sequence&lt;float&gt; coords)
]
interface Point3D {
  attribute float x;
  attribute float y;
  attribute float z;

  void setCoords(sequence&lt;float&gt; coords);
  void setCoords(float x, float y, float z);
  sequence&lt;float&gt; getCoords();

  boolean equal(Point3D point);
  boolean equal(float x, float y, float z);

  static float distance(Point3D p1, Point3D p2);
};
</pre>

### Attributes ### {#point3d-attributes-1}
: {{x}} of type [=float=]
::  The current x value of the point

### Attributes ### {#point3d-attributes-2}
: {{y}} of type [=float=]
::  The current y value of the point

### Attributes ### {#point3d-attributes-3}
: {{z}} of type [=float=]
::  The current z value of the point

### Methods ### {#methods-point3DInterface}
: {{setCoords}}
:: Use this method to change the (x, y, z) value of the point.
:: *Return type*: <code>void</code>

: {{getCoords}}
:: Use this method to get the (x, y, z) value of the point.
:: *Return type*: <code>sequence&lt;float&gt;</code>

: {{equal}}
:: Use this method to compare to another point.
:: *Return type*: <code>booleanean</code>

: {{distance}}
:: Use this method to calculate the distance between 2 points.
:: *Return type*: <code>float</code>



<dfn>Range</dfn> {#rangeInterface}
----------------------------

<pre class="idl">
[
Constructor,
Constructor(float begin, float end)
]
interface Range {
  attribute float begin;
  attribute float end;

  attribute float min; // Alias to begin
  attribute float max; // Alias to end

  readonly attribute float length;

  boolean contains(float value);
  boolean properlyContains(float value);

  boolean equal(Range range);
  boolean equal(float begin, float end);

  boolean isEmpty();
  boolean isValid();

  stringifier;
};
</pre>

### Attributes ### {#range-attributes-1}
: {{begin}} of type [=float=]
::  The first value of the range

### Attributes ### {#range-attributes-2}
: {{end}} of type [=float=]
::  The last value of the range

### Attributes ### {#range-attributes-3}
: {{min}} of type [=float=]
::  The alias to the first value of the range

### Attributes ### {#range-attributes-4}
: {{max}} of type [=float=]
::  The alias to the last value of the range

### Methods ### {#methods-rangeInterface}
: {{contains}}
:: Use this method to determine if a value is in a specified range [begin, end]
:: *Return type*: <code>booleanean</code>

: {{properlyContains}}
:: Use this method to determine if a value is in a specified range (begin, end)
:: *Return type*: <code>booleanean</code>

: {{equal}}
:: Use this method to compare to another range.
:: *Return type*: <code>booleanean</code>

: {{isEmpty}}
:: Use this method to determine if a range is empty.
:: *Return type*: <code>booleanean</code>

: {{isValid}}
:: Use this method to determine if a range is valid (first &lt;= last).
:: *Return type*: <code>booleanean</code>




<dfn>Size2D</dfn> {#size2DInterface}
----------------------------

<pre class="idl">
[
Constructor,
Constructor(float width, float height)
]
interface Size2D {
  attribute float width;
  attribute float height;

  attribute float cx; // Alias to width
  attribute float cy; // Alias to height

  boolean equal(Size2D size);
  boolean equal(float width, float height);

  boolean isEmpty();
  boolean isValid();

  stringifier;
};
</pre>

### Attributes ### {#size2d-attributes-1}
: {{width}} of type [=float=]
::  The width of the size

### Attributes ### {#size2d-attributes-2}
: {{height}} of type [=float=]
::  The height of the size

### Attributes ### {#size2d-attributes-3}
: {{cx}} of type [=float=]
::  The alais to the width of the size

### Attributes ### {#size2d-attributes-4}
: {{cy}} of type [=float=]
::  The alais to the height of the size

### Methods ### {#size2d-methods}
: {{equal}}
:: Use this method to compare to another size.
:: *Return type*: <code>booleanean</code>

: {{isEmpty}}
:: Use this method to determine if a size is empty.
:: *Return type*: <code>booleanean</code>

: {{isValid}}
:: Use this method to determine if a size is valid (width &gt;= 0 and height &gt;= 0).
:: *Return type*: <code>booleanean</code>


<dfn>Rect2D</dfn> {#rect2DInterface}
----------------------------

<pre class="idl">
[
Constructor,
Constructor(float x, float y, float width, float height),
Constructor(Point2D topLeft, Size2D size),
Constructor(sequence&lt;float&gt; coords)
]
interface Rect2D {
  attribute float x;
  attribute float y;
  attribute float width;
  attribute float height;
  readonly attribute float diagonalLength;
  attribute Size2D size;

  attribute Point2D topLeft;
  attribute Point2D topRight;
  attribute Point2D bottomLeft;
  attribute Point2D bottomRight;

  attribute Point2D center;
  attribute Point2D topCenter;
  attribute Point2D bottomCenter;
  attribute Point2D leftCenter;
  attribute Point2D rightCenter;

  attribute float top;
  attribute float left;
  attribute float bottom;
  attribute float right;

  attribute Range horzRange;
  attribute Range vertRange;

  boolean equal(Rect2D rect);
  boolean equal(Point2D topLeft, Size2D size);
  boolean equal(Point2D topLeft, Point2D bottomRight);
  boolean equal(float x, float y, float width, float height);
  boolean equalCoord(float left, float top, float right, float bottom);

  boolean isEmpty();
  boolean isValid();

  void adjust(float leftNudge, float topNudge, float rightNudge, float bottomNudge);

  void expand(float leftNudge, float topNudge, float rightNudge, float bottomNudge);
  void expand(Size2D size);
  void expand(float x, float y);
  void expand(float value);

  void shrink(float leftNudge, float topNudge, float rightNudge, float bottomNudge);
  void shrink(Size2D size);
  void shrink(float x, float y);
  void shrink(float value);

  void move(float x, float y);

  void moveTopTo(float coord);
  void moveLeftTo(float coord);
  void moveRightTo(float coord);
  void moveBottomTo(float coord);

  void moveTopLeftTo(Point2D point);
  void moveTopRightTo(Point2D point);
  void moveBottomRightTo(Point2D point);
  void moveBottomLeftTo(Point2D point);
  void moveCenterTo(Point2D point);
  void moveLeftCenterTo(Point2D point);
  void moveTopCenterTo(Point2D point);
  void moveRightCenterTo(Point2D point);
  void moveBottomCenterTo(Point2D point);

  void normalize();

  void setCoords(float left, float top, float right, float bottom);
  void setCoords(sequence&lt;float&gt; coords);

  sequence&lt;Float&gt; getCoords();

  boolean onEdge(float x, float y);
  boolean onEdge(Point2D point);

  boolean contains(Point2D point);
  boolean contains(float x, float y);
  boolean contains(Rect2D rect);
  boolean contains(float x, float y, float width, float height);
  boolean containsCoord(float left, float top, float right, float bottom);

  boolean properlyContains(Point2D point);
  boolean properlyContains(float x, float y);
  boolean properlyContains(Rect2D rect);
  boolean properlyContains(float x, float y, float width, float height);
  boolean properlyContainsCoord(float left, float top, float right, float bottom);

  stringifier;
};
</pre>

### Attributes ### {#rect2d-attributes-1}
: {{x}} of type [=float=]
:: the x of the rectangle

### Attributes ### {#rect2d-attributes-2}
: {{y}} of type [=float=]
:: the y of the rectangle

### Attributes ### {#rect2d-attributes-3}
: {{width}} of type [=float=]
:: the width of the rectangle

### Attributes ### {#rect2d-attributes-4}
: {{height}} of type [=float=]
:: the height of the rectangle

### Attributes ### {#rect2d-attributes-5}
: {{diagonalLength}} of type [=float=]
:: the diagonal length of the rectangle

### Attributes ### {#rect2d-attributes-6}
: {{size}} of type [=Size2D=]
:: the size of the rectangle

### Attributes ### {#rect2d-attributes-7}
: {{topLeft}} of type [=Point2D=]
:: the top-left of the rectangle

### Attributes ### {#rect2d-attributes-8}
: {{topRight}} of type [=Point2D=]
:: the top-right of the rectangle

### Attributes ### {#rect2d-attributes-9}
: {{bottomLeft}} of type [=Point2D=]
:: the bottomLeft of the rectangle

### Attributes ### {#rect2d-attributes-a}
: {{bottomRight}} of type [=Point2D=]
:: the bottom-right of the rectangle

### Attributes ### {#rect2d-attributes-b}
: {{center}} of type [=Point2D=]
:: the center of the rectangle

### Attributes ### {#rect2d-attributes-c}
: {{topCenter}} of type [=Point2D=]
:: the top-center of the rectangle

### Attributes ### {#rect2d-attributes-d}
: {{bottomCenter}} of type [=Point2D=]
:: the bottom-center of the rectangle

### Attributes ### {#rect2d-attributes-e}
: {{leftCenter}} of type [=Point2D=]
:: the left-center of the rectangle

### Attributes ### {#rect2d-attributes-f}
: {{rightCenter}} of type [=Point2D=]
:: the right-center of the rectangle

### Attributes ### {#rect2d-attributes-g}
: {{top}} of type [=float=]
:: the top of the rectangle

### Attributes ### {#rect2d-attributes-h}
: {{left}} of type [=float=]
:: the left of the rectangle

### Attributes ### {#rect2d-attributes-i}
: {{bottom}} of type [=float=]
:: the bottom of the rectangle

### Attributes ### {#rect2d-attributes-j}
: {{right}} of type [=float=]
:: the right of the rectangle

### Attributes ### {#rect2d-attributes-k}
: {{horzRange}} of type [=Range=]
:: the horz-range of the rectangle

### Attributes ### {#rect2d-attributes-l}
: {{vertRange}} of type [=Range=]
:: the vert-range of the rectangle

### Methods ### {#rect2d-methods}
: {{equal}}
:: Use this method to compare to another rectangle.
:: *Return type*: <code>booleanean</code>

: {{equalCoord}}
:: Use this method to compare to another rectangle.
:: *Return type*: <code>booleanean</code>

: {{isEmpty}}
:: Use this method to determine if a rectangle is empty.
:: *Return type*: <code>booleanean</code>

: {{isValid}}
:: Use this method to determine if a rectangle is valid (width &gt;= 0 and height &gt;= 0).
:: *Return type*: <code>booleanean</code>

: {{adjust}}
:: Use this method to change the rectangle
:: *Return type*: <code>void</code>

: {{expand}}
:: Use this method to increase size of the rectangle
:: *Return type*: <code>void</code>

: {{shrink}}
:: Use this method to decrease size of the rectangle
:: *Return type*: <code>void</code>

: {{move}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveTopTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveLeftTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveRightTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveBottomTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveTopLeftTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveTopRightTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveBottomRightTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveBottomLeftTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveCenterTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveLeftCenterTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveTopCenterTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveRightCenterTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{moveBottomCenterTo}}
:: Use this method to move the rectangle
:: *Return type*: <code>void</code>

: {{normalize}}
:: Use this method to normalize the rectangle
:: *Return type*: <code>void</code>

: {{setCoords}}
:: Use this method to change the rectangle
:: *Return type*: <code>void</code>

: {{getCoords}}
:: Use this method to get the (left, top, right, bottom) of the rectangle
:: *Return type*: <code>sequence&lt;float&gt;</code>

: {{onEdge}}
:: Use this method to determine if the specified point is on the edge of the rectangle
:: *Return type*: <code>booleanean</code>

: {{contains}}
:: Use this method to determine if the specified point or a rectangle is in the rectangle
:: *Return type*: <code>booleanean</code>

: {{containsCoord}}
:: Use this method to determine if the specified point or a rectangle is in the rectangle
:: *Return type*: <code>booleanean</code>

: {{properlyContains}}
:: Use this method to determine if the specified point or a rectangle is in the rectangle (but not on any edge of the rectangle)
:: *Return type*: <code>booleanean</code>

: {{properlyContainsCoord}}
:: Use this method to determine if the specified point or a rectangle is in the rectangle (but not on any edge of the rectangle)
:: *Return type*: <code>booleanean</code>


